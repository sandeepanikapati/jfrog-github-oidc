name: "JFrog-GitHub NPM Publish OIDC Integration"
on: push

# This is required as per.
# https://docs.github.com/en/actions/deployment/securiy-hardening-your-deployments/configuring-openid-connectn-cloud--providers#adding-permissions-settinkgs
permissions:
  id-token: write

jobs:
  build:
     runs-on: ubuntu-latest
     env:
      OIDC_AUDIENCE: 'jfrog-github'
      PLATFORM_REPO: 'sand-npm'
     defaults:
      run:
        working-directory: ./package
     steps:
       - name: Checkout
         uses: actions/checkout@v3
              
       - name: Setup Node npm
         uses: actions/setup-node@v3
   
       - name: Setup JFrog CLI
         uses: jfrog/setup-jfrog-cli@v3
         env:  
           JF_URL: ${{ secrets.JF_URL }}
         with:
           oidc-provider-name: san-git-intergation
           oidc-audience: jfrog-github

       - name: Log in to JFrog Docker registry
         run: |
          docker login ${{ secrets.JFROG_URL }}/ \
            -u ${{ secrets.JFROG_USERNAME }} --password ${{ secrets.JFROG_PASSWORD }}
            
       - name: Pull Docker image
         run: |
          docker pull hts2-girigithub-oci-local.jfrog.io/ociimage:1.0

       - name: tag Docker image
         run: |
          docker tag hts2-girigithub-oci-local.jfrog.io/ociimage:1.1 hts2-girigithub-oci-local.jfrog.io/myapp:1.0

       - name: push Docker image
         run: |
          docker push hts2-girigithub-oci-local.jfrog.io/myapp:1.1           
       - name: Set CLI Config
         run: jf npm-config --global=true --repo-resolve=$PLATFORM_REPO --repo-deploy=$PLATFORM_REPO

       - name: Print GitHub organization name
         run: |
           printenv
 
       - name: Install Dependencies
         run: jf npm install
           
       - name: Run tests
         run: npm test
         
       - name: Publish
         run: jf npm publish
         
       - name: Publish Build info With JFrog CLI
         run: |
          # Collect environment variables for the build
          jf rt build-collect-env
          # Collect VCS details from git and add them to the build
          jf rt build-add-git
          # Publish build info
          jf rt build-publish
