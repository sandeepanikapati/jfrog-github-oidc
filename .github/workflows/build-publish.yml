
name: Pre-Container Configuration Example
on: [push]
permissions:
  contents: read
  id-token: write
jobs:
  container_job:
    runs-on: ubuntu-latest
    steps:
      - name: Get id token
        run: |
          ID_TOKEN=$(curl -sLS -H "User-Agent: actions/oidc-client" -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
          "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=jfrog-github" | jq .value | tr -d '"')
          echo "ID_TOKEN=${ID_TOKEN}" >> $GITHUB_ENV

      - name: Exchange token with access
        env:
         ID_TOKEN: ${{env.ID_TOKEN}}
         JFROG_PLATFORM_URL: https://incloudmaster.jfrog.io
        run: |
             ACCESS_TOKEN=$(curl -XPOST -H "Content-Type: application/json" "https://incloudmaster.jfrog.io/access/api/v1/oidc/token" -d "{\"grant_type\": \"urn:ietf:params:oauth:grant-type:token-exchange\", \"subject_token_type\":\"urn:ietf:params:oauth:token-type:id_token\", \"subject_token\": \"${ID_TOKEN}\", \"provider_name\": \"san-git-intergation\"}" | jq .access_token | tr -d '"')
                    echo "ACCESS_TOKEN=${ACCESS_TOKEN}" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Decode JWT and extract sub claim
        run: |

          JWT_TOKEN="${ID_TOKEN}"
          PAYLOAD=$(echo $JWT_TOKEN | cut -d '.' -f 2)
          SUB_CLAIM=$(echo $PAYLOAD | base64 --decode | jq -r .sub)
          echo "sub claim: $SUB_CLAIM"
        env:
          JWT_TOKEN: ${{ secrets.MY_JWT }}

      - name: Logs
        run: |
          printenv
          
      - name: Initialize Docker container
        run: |
          docker login incloudmaster.jfrog.io -u ${{ secrets.JFROG_USER }} -p $ACCESS_TOKEN
          docker pull incloudmaster.jfrog.io/docker-remote/node:lts-alpine
